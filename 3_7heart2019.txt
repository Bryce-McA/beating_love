#include<glut.h>
#include<stdio.h>
#include<Windows.h>
#include<math.h>
# define PI 3.1415926
long TimerLove = 0;

int thunderColor = 1;//雷霆变色计数器
int thunderJump = 0;
int lazerEyeTime = 0;
int shield = 0;

int walkTime = 100;
double tempWalk;

double R = 20;
double R2 = 2.5;
int n = 6;//六边形
int n2 = 100;//圆圈

bool superEye = false;//超级眼
					  //以上为雷霆跳的特效全局变量

bool landed = true;

int robotIdentity = 2;
//robotIdentity，1为普通人，2为超人

double robotX = 0;
double robotY = 0;
double robotZ = 0;

double v_robot = 0;
double v_robotY = 0;
double v_robotX = 0;
double v_robotZ = 0;
double gravity = 9.8;//重力加速度



double cameraX = 100;
double cameraY = 45;
double cameraZ = 16;
double lookAimX = 55;
double lookAimY = 0;//这个高度不变
double lookAimZ = 3;


int weatherChoose = 1;// 1是太阳，2是月亮

double theta = 0;//并不是角度制,本来以为没有用结果用上了，sin和cos的一圈是 6.28 rads
int flag = 0;
//------------------------------
//这里面是建筑群，高楼长20，宽20，每层高5
double building1X = -150;
double building1Z = 50;
double building1Floor = 30;

double building2X = -150;
double building2Z = 20;
double building2Floor = 0;

double building3X = -150;
double building3Z = -30;
double building3Floor = 4;

double building4X = -150;
double building4Z = -100;
double building4Floor = 0;

double building5X = -150;
double building5Z = -50;
double building5Floor = 10;

double building6X = -150;
double building6Z = 90;
double building6Floor = 10;

double building7X = -170;
double building7Z = -10;
double building7Floor = 10;

double building8X = -170;
double building8Z = -50;
double building8Floor = 10;

double building9X = -170;
double building9Z = 40;
double building9Floor = 10;

double building10X = -170;
double building10Z = 80;
double building10Floor = 10;

//------------------------------
//粉红球坐标
double N1x = -75;
double N1y = 100;
double N1z = 0;
double v_N1y = 0;

double NW4x = -100;
double NW4y = 100;
double NW4z = 30;
double v_NW4y = 0;
double NE4x = -100;
double NE4z = -30;

double NW3x = -110;
double NW3y = 100;
double NW3z = 70;
double v_NW3y = 0;
double NE3x = -110;
double NE3z = -70;

double NW2x = -80;
double NW2y = 100;
double NW2z = 110;
double v_NW2y = 0;
double NE2x = -80;
double NE2z = -110;

double NW1x = -30;
double NW1y = 100;
double NW1z = 115;
double v_NW1y = 0;
double NE1x = -30;
double NE1z = -115;
//North
//----------------
//Sourth
double SW3x = 15;
double SW3y = 100;
double SW3z = 97;
double v_SW3y = 0;
double SE3x = 15;
double SE3z = -97;

double SW2x = 53;
double SW2y = 100;
double SW2z = 67;
double v_SW2y = 0;
double SE2x = 53;
double SE2z = -67;

double SW1x = 90;
double SW1y = 100;
double SW1z = 35;
double v_SW1y = 0;
double SE1x = 90;
double SE1z = -35;

double S1x = 123;
double S1y = 100;
double S1z = 0;
double v_S1y = 0;




//用到的函数一览↓
void PBall(double x, double y, double z);

void Done_Robot(double firstX, double firstY, double firstZ, int identity, bool onLand);

void buildingBuild(double BX, double BZ, int floorN);
void box(double x, double y, double z, double h, int inRect);
void menu1();
void menu2();
void init();
void reshape(int w, int h);
void changFangTiInDisplay
(
	double upy, double up1x, double up1z, double up2x, double up2z, double up3x, double up3z, double up4x, double up4z,
	double downy, double down1x, double down1z, double down2x, double down2z, double down3x, double down3z, double down4x, double down4z,
	double R, double G, double B, double ALPHA
);
void display();
void spinCube();
void mouse(int btn, int state, int x, int y);
void mykeyboard(unsigned char key, int x, int y);
//用到的函数一览↑


void PBall(double x, double y, double z)
{
	glColor3f(1, 0.714, 0.757);
	glPushMatrix();
	glTranslatef(x, y + 10, z);
	glutWireSphere(10, 20, 20);
	glPopMatrix();
}



//Done_Robot写的不完美，里面的参数使用错乱不堪
void Done_Robot(double firstX, double firstY, double firstZ, int identity, bool onLand)
{
	// 阴影，用来确定超人的位置, 阴影崩了，直接换个锁定位置吧
	if (firstX <= 100 && firstX >= -100 && firstZ <= 100 && firstZ >= -100)
	{
		glVertex4f(0.1, 0.1, 0.1, 0.1);
		glBegin(GL_LINE_STRIP);
		for (int i = 0; i < n2; i++)
		{
			glVertex3f(firstX + R2*cos(2 * PI*i / n2), 1, firstZ + R2*sin(2 * PI*i / n2));   //定义顶点
		}
		glEnd();
	}
	else if ((firstX>100 || firstX<-100) && (firstZ>100 || firstZ<-100))
	{
		glBegin(GL_LINE_STRIP);
		for (int i = 0; i < n2; i++)
		{
			glVertex3f(((firstX>100) ? 100 : -100) + R2*cos(2 * PI*i / n2), 1, ((firstZ>100) ? 100 : -100) + R2*sin(2 * PI*i / n2));   //定义顶点
		}
		glEnd();
	}
	else if ((firstX > 100 || firstX < -100) && (firstZ <= 100 && firstZ >= -100))
	{
		glBegin(GL_LINE_STRIP);
		for (int i = 0; i < n2; i++)
		{
			glVertex3f(((firstX>100) ? 100 : -100) + R2*cos(2 * PI*i / n2), 1, firstZ + R2*sin(2 * PI*i / n2));   //定义顶点
		}
		glEnd();
	}
	else if ((firstX <= 100 && firstX >= -100) && (firstZ > 100 || firstZ < -100))
	{
		glBegin(GL_LINE_STRIP);
		for (int i = 0; i < n2; i++)
		{
			glVertex3f(firstX + R2*cos(2 * PI*i / n2), 1, ((firstZ>100) ? 100 : -100) + R2*sin(2 * PI*i / n2));   //定义顶点
		}
		glEnd();
	}

	//下面这个是人类模式
	//这个人身高60像素
	//头↓
	//身体↓
	//下面是人类的动腿系统，超人的腿不会动
	//人类动腿机制
	/*
	200-150  o->
	150-100  o<-
	100- 50  <-o
	50-  0  ->o
	*/
}


void buildingBuild(double BX, double BZ, int floorN)
{
	double tempY = 0;
	for (; floorN > 0; floorN--)
	{
		changFangTiInDisplay(tempY + 5, BX + 10, BZ + 10, BX + 10, BZ - 10, BX - 10, BZ - 10, BX - 10, BZ + 10,
			tempY, BX + 10, BZ + 10, BX + 10, BZ - 10, BX - 10, BZ - 10, BX - 10, BZ + 10, 0.753, 0.753, 0.753, 1);
		tempY += 5;
	}
}


void init()
{
	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	glEnable(GL_DEPTH_TEST);
	glLineWidth(3);
}

void reshape(int w, int h)
{
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	if (w <= h)
		glOrtho(-200, 200, -200 * (GLfloat)h / (GLfloat)w, 200 * (GLfloat)h / (GLfloat)w, -600, 600);
	else
		glOrtho(200 * (GLfloat)h / (GLfloat)w, 200 * (GLfloat)h / (GLfloat)w, -200.0, 200.0, -600, 600);


	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void changFangTiInDisplay//自定义的长方体画法
(
	double upy, double up1x, double up1z, double up2x, double up2z, double up3x, double up3z, double up4x, double up4z,
	double downy, double down1x, double down1z, double down2x, double down2z, double down3x, double down3z, double down4x, double down4z,
	double R, double G, double B, double ALPHA
)
{
	glColor4f(R, G, B, ALPHA);
	glBegin(GL_POLYGON);
	glVertex3f(up1x, upy, up1z);
	glVertex3f(up2x, upy, up2z);
	glVertex3f(down2x, downy, down2z);
	glVertex3f(down1x, downy, down1z);
	glEnd();

	glBegin(GL_POLYGON);
	glVertex3f(up3x, upy, up3z);
	glVertex3f(up2x, upy, up2z);
	glVertex3f(down2x, downy, down2z);
	glVertex3f(down3x, downy, down3z);
	glEnd();

	glBegin(GL_POLYGON);
	glVertex3f(up3x, upy, up3z);
	glVertex3f(up4x, upy, up4z);
	glVertex3f(down4x, downy, down4z);
	glVertex3f(down3x, downy, down3z);
	glEnd();

	glBegin(GL_POLYGON);
	glVertex3f(up1x, upy, up1z);
	glVertex3f(up4x, upy, up4z);
	glVertex3f(down4x, downy, down4z);
	glVertex3f(down1x, downy, down1z);
	glEnd();

	glBegin(GL_POLYGON);
	glVertex3f(up1x, upy, up1z);
	glVertex3f(up2x, upy, up2z);
	glVertex3f(up3x, upy, up3z);
	glVertex3f(up4x, upy, up4z);
	glEnd();

	glBegin(GL_POLYGON);
	glVertex3f(down1x, downy, down1z);
	glVertex3f(down2x, downy, down2z);
	glVertex3f(down3x, downy, down3z);
	glVertex3f(down4x, downy, down4z);
	glEnd();

	glColor3f(1, 1, 1);
	glLineWidth(1.0);
	glBegin(GL_LINES);
	// 1
	glVertex3f(up1x, upy, up1z);
	glVertex3f(up2x, upy, up2z);
	//2
	glVertex3f(up2x, upy, up2z);
	glVertex3f(up3x, upy, up3z);
	//3
	glVertex3f(up3x, upy, up3z);
	glVertex3f(up4x, upy, up4z);
	//4
	glVertex3f(up4x, upy, up4z);
	glVertex3f(up1x, upy, up1z);
	//5
	glVertex3f(down1x, downy, down1z);
	glVertex3f(down2x, downy, down2z);
	//6
	glVertex3f(down2x, downy, down2z);
	glVertex3f(down3x, downy, down3z);
	//7
	glVertex3f(down3x, downy, down3z);
	glVertex3f(down4x, downy, down4z);
	//8
	glVertex3f(down4x, downy, down4z);
	glVertex3f(down1x, downy, down1z);
	//9
	glVertex3f(up1x, upy, up1z);
	glVertex3f(down1x, downy, down1z);
	//10
	glVertex3f(up2x, upy, up2z);
	glVertex3f(down2x, downy, down2z);
	//11
	glVertex3f(up3x, upy, up3z);
	glVertex3f(down3x, downy, down3z);
	//12
	glVertex3f(up4x, upy, up4z);
	glVertex3f(down4x, downy, down4z);
	glEnd();
}

void display()
{
	//glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	//超人拥有主角镜头，而人类没有
	if (robotIdentity == 1)
		gluLookAt(cameraX, cameraY, cameraZ, lookAimX, lookAimY, lookAimZ, 0, 1, 0);
	else
		gluLookAt(cameraX + 0.9*robotX, cameraY + 0.9*robotY + 5 * v_robot, cameraZ + 0.9*robotZ + 2 * v_robot, 55 + robotX, robotY, 3 + robotZ, 0, 1, 0);

	if (thunderJump > 0)//好了，魔法盘会旋转了
	{
		glBegin(GL_POLYGON);
		for (int i = 0; i < n; i++)
			glVertex3f(robotX + R*cos(-0.5*theta + i * 2 * PI / n), robotY + 1, robotZ + R*sin(-0.5*theta + i * 2 * PI / n));
		glEnd();

		glLineWidth(0.8);
		glBegin(GL_LINE_LOOP);
		for (int i = 0; i < n2; i++)
			glVertex3f(robotX + R*cos(i * 2 * PI / n2), robotY + 1, robotZ + R*sin(i * 2 * PI / n2));
		glEnd();
	}

	//超级眼的眼光
	if (superEye == true && robotIdentity == 2)
	{
		glEnable(GL_BLEND);  //开启混合模式
		glDisable(GL_DEPTH_TEST);  //关闭深度测试
		glBlendFunc(GL_SRC_ALPHA, GL_ONE);//这三个为透视模式
										  //上面是透视

	}
	else
	{
		glDisable(GL_BLEND);
		glEnable(GL_DEPTH_TEST);
		//上面是关闭透视特效

		//画球步骤  画球步骤  画球步骤  画球步骤  画球步骤
		//glColor3f(0.502, 0.502, 0);
		//glPushMatrix();
		//glTranslatef(robotX + 9, robotY + 50, robotZ + 4);
		//glutWireSphere(1, 10, 10);
		//glPopMatrix();
	}


	//下面是超人飞行时，脚底喷火


	//这里做冰火旋绕球
	if (robotIdentity == 2)
	{
		//n=2, i=1 i=0
		//火球
		glPushMatrix();
		glTranslatef(robotX + 0.5*R*cos(theta), robotY, robotZ + 0.5*R*sin(theta));
		glColor3f(0.78, 0.083, 0.522);
		glutWireSphere(4, 5, 5);
		glColor3f(1, 1, 1);
		glutSolidSphere(3, 5, 5);
		glPopMatrix();

		glPushMatrix();
		glTranslatef(robotX + 0.5*R*cos(theta - 0.5) - 4 * v_robotX, robotY - 3 * v_robotY, robotZ + 0.5*R*sin(theta - 0.5) - 4 * v_robotZ);
		glColor3f(0.78, 0.083, 0.522);
		glutWireSphere(2, 5, 5);
		glColor3f(1, 1, 1);
		glutSolidSphere(1, 5, 5);
		glPopMatrix();

		glPushMatrix();
		glTranslatef(robotX + 0.5*R*cos(theta - 1) - 11 * v_robotX, robotY - 6 * v_robotY, robotZ + 0.5*R*sin(theta - 1) - 11 * v_robotZ);
		glColor3f(0.78, 0.083, 0.522);
		glutSolidSphere(1, 3, 3);
		glPopMatrix();

		//冰球
		glPushMatrix();
		glTranslatef(robotX + 0.5*R*cos(theta + PI), robotY, robotZ + 0.5*R*sin(theta + PI));
		glColor3f(0.686, 0.933, 0.933);
		glutWireSphere(4, 5, 5);
		glColor3f(1, 1, 1);
		glutSolidSphere(3, 5, 5);
		glPopMatrix();

		glPushMatrix();
		glTranslatef(robotX + 0.5*R*cos(theta + PI - 0.5) - 4 * v_robotX, robotY - 3 * v_robotY, robotZ + 0.5*R*sin(theta + PI - 0.5) - 4 * v_robotZ);
		glColor3f(0.686, 0.933, 0.933);
		glutWireSphere(2, 5, 5);
		glColor3f(1, 1, 1);
		glutSolidSphere(1, 5, 5);
		glPopMatrix();

		glPushMatrix();
		glTranslatef(robotX + 0.5*R*cos(theta + PI - 1) - 11 * v_robotX, robotY - 6 * v_robotY, robotZ + 0.5*R*sin(theta + PI - 1) - 11 * v_robotZ);
		glColor3f(0.686, 0.933, 0.933);
		glutSolidSphere(1, 3, 3);
		glPopMatrix();

	}




	//----------------------------------------------------上面是特效
	//----------------------------------------------------下面是特效背景

	//S1
	PBall(S1x, S1y, S1z);

	//N1
	PBall(N1x, N1y, N1z);

	//NW4
	PBall(NW4x, NW4y, NW4z);

	//NE4
	PBall(NE4x, NW4y, NE4z);

	//NW3
	PBall(NW3x, NW3y, NW3z);

	//NE3
	PBall(NE3x, NW3y, NE3z);

	//NW2    -80  110
	PBall(NW2x, NW2y, NW2z);

	//NE2    -80  -110
	PBall(NE2x, NW2y, NE2z);

	//NW1    -30  -115
	PBall(NW1x, NW1y, NW1z);

	//NE1    -30  115
	PBall(NE1x, NW1y, NE1z);

	//SW3
	PBall(SW3x, SW3y, SW3z);

	//SE3
	PBall(SE3x, SW3y, SE3z);

	//SW2
	PBall(SW2x, SW2y, SW2z);

	//SE2
	PBall(SE2x, SW2y, SE2z);

	//SW1
	PBall(SW1x, SW1y, SW1z);

	//SE1
	PBall(SE1x, SW1y, SE1z);


	//h
	glColor3f(0, 1, 1);
	glLineWidth(3.0);
	glBegin(GL_LINES);
	glVertex3f(-45, 1, 70);
	glVertex3f(-35, 1, 70);
	glVertex3f(-40, 1, 70);
	glVertex3f(-40, 1, 65);
	glVertex3f(-40, 1, 65);
	glVertex3f(-35, 1, 65);
	glEnd();

	//a
	glLineWidth(3.0);
	glBegin(GL_LINES);
	glVertex3f(-40, 1, 62);
	glVertex3f(-35, 1, 62);
	glVertex3f(-35, 1, 62);
	glVertex3f(-37, 1, 57);
	glVertex3f(-40, 1, 62);
	glVertex3f(-40, 1, 57);
	glVertex3f(-40, 1, 57);
	glVertex3f(-35, 1, 57);
	glEnd();

	//p1
	glBegin(GL_LINES);
	glVertex3f(-40, 1, 54);
	glVertex3f(-30, 1, 54);
	glVertex3f(-40, 1, 54);
	glVertex3f(-40, 1, 49);
	glVertex3f(-35, 1, 54);
	glVertex3f(-35, 1, 49);
	glVertex3f(-40, 1, 49);
	glVertex3f(-35, 1, 49);
	glEnd();

	//p2
	glBegin(GL_LINES);
	glVertex3f(-40, 1, 46);
	glVertex3f(-30, 1, 46);
	glVertex3f(-40, 1, 46);
	glVertex3f(-40, 1, 41);
	glVertex3f(-35, 1, 46);
	glVertex3f(-35, 1, 41);
	glVertex3f(-40, 1, 41);
	glVertex3f(-35, 1, 41);
	glEnd();

	//y
	glBegin(GL_LINES);
	glVertex3f(-40, 1, 38);
	glVertex3f(-35, 1, 35);
	glVertex3f(-40, 1, 33);
	glVertex3f(-30, 1, 38);
	glEnd();


	//3
	glColor3f(0, 1, 1);
	glLineWidth(3.0);
	glBegin(GL_LINES);
	glVertex3f(-45, 1, 8);
	glVertex3f(-41, 1, 3);
	glVertex3f(-41, 1, 3);
	glVertex3f(-37, 1, 8);
	glVertex3f(-37, 1, 8);
	glVertex3f(-33, 1, 3);
	glVertex3f(-33, 1, 3);
	glVertex3f(-30, 1, 8);
	glEnd();

	//.
	glBegin(GL_LINES);
	glVertex3f(-31, 1, 1);
	glVertex3f(-31, 1, -1);
	glVertex3f(-31, 1, -1);
	glVertex3f(-29, 1, -1);
	glVertex3f(-29, 1, -1);
	glVertex3f(-29, 1, 1);
	glVertex3f(-29, 1, 1);
	glVertex3f(-31, 1, -1);
	glEnd();

	//7
	glBegin(GL_LINES);
	glVertex3f(-45, 1, -3);
	glVertex3f(-45, 1, -8);
	glVertex3f(-45, 1, -8);
	glVertex3f(-30, 1, -5);
	glEnd();


	//T
	glColor3f(0, 1, 1);
	glLineWidth(3.0);
	glBegin(GL_LINES);
	glVertex3f(-45, 1, -30);
	glVertex3f(-45, 1, -36);
	glVertex3f(-45, 1, -33);
	glVertex3f(-30, 1, -32);
	glEnd();

	//o
	glBegin(GL_LINES);
	glVertex3f(-40, 1, -38);
	glVertex3f(-40, 1, -43);
	glVertex3f(-35, 1, -38);
	glVertex3f(-35, 1, -43);
	glVertex3f(-40, 1, -38);
	glVertex3f(-35, 1, -38);
	glVertex3f(-40, 1, -43);
	glVertex3f(-35, 1, -43);
	glEnd();




	//----------------------------------------------------上面是特效背景
	//----------------------------------------------------下面是背景

	//下面是一个三维坐标系
	glColor3f(1.0, 0.0, 0.0);//亮红色X轴
	glBegin(GL_LINES);
	glVertex3f(-200.0, -1, 0.0);
	glColor3f(1, 1, 1);
	glVertex3f(200.0, -1, 0.0);
	glEnd();

	glColor3f(0.0, 1.0, 0.0);//亮绿色Y轴
	glBegin(GL_LINES);
	glVertex3f(0.0, -200, 0.0);
	glColor3f(1, 1, 1);
	glVertex3f(0.0, -1, 0.0);
	glEnd();

	glColor3f(0.0, 0.0, 1.0);//亮蓝色Z轴
	glBegin(GL_LINES);
	glVertex3f(0.0, -1, -200.0);
	glColor3f(1, 1, 1);
	glVertex3f(0.0, -1, 200.0);
	glEnd();


	//草坪围栏
	glColor3f(1, 0.498, 0.141);
	glLineWidth(1.5);
	glBegin(GL_LINES);
	glVertex3f(160, 0, 160);
	glVertex3f(160, 0, -160);
	glVertex3f(160, 0, -160);
	glVertex3f(-160, 0, -160);
	glVertex3f(-160, 0, -160);
	glVertex3f(-160, 0, 160);
	glVertex3f(-160, 0, 160);
	glVertex3f(160, 0, 160);
	glEnd();
	glLineWidth(1);


	glColor4f(0.333, 0.102, 0.545, 0.5);//画出透明紫色草坪
	glBegin(GL_POLYGON);
	glVertex3f(-150, 0, -150);
	glVertex3f(-150, 0, 150);
	glVertex3f(150, 0, 150);
	glVertex3f(150, 0, -150);
	glEnd();

	//天气，大太阳


	/*glPushMatrix();
	glTranslatef(-50, 160, 70);
	glColor3f(1, 1, 1);
	glutWireSphere(23, 100, 100);
	glColor3f(0.82, 0.933, 0.933);
	glutWireSphere(25, 90, 90);
	glPopMatrix();*/

	//下面这些事星星
	//第一个云球
	glPushMatrix();
	glTranslatef(-50, 130, 70);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第二个云球
	glPushMatrix();
	glTranslatef(-100, 130, -90);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第三个云球
	glPushMatrix();
	glTranslatef(90, 130, 90);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第四个云球
	glPushMatrix();
	glTranslatef(95, 130, -100);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glColor3f(0, 0, 0.545);//蓝色星星
	glutWireSphere(1, 5, 5);
	glPopMatrix();

	//第五个云球
	glPushMatrix();
	glTranslatef(-80, 130, 85);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第六个云球
	glPushMatrix();
	glTranslatef(0, 130, -30);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第七个云球
	glPushMatrix();
	glTranslatef(10, 130, -30);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glColor3f(1, 0, 1);
	glutWireSphere(1, 5, 5);
	glPopMatrix();

	//第八个云球
	glPushMatrix();
	glTranslatef(-50, 130, -30);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第九个云球
	glPushMatrix();
	glTranslatef(-50, 130, 0);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第十个云球
	glPushMatrix();
	glTranslatef(50, 130, 10);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第十一个云球
	glPushMatrix();
	glTranslatef(50, 130, -20);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第十二个云球
	glPushMatrix();
	glTranslatef(-10, 140, 55);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第十三个星星
	glPushMatrix();
	glTranslatef(70, 130, -50);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glColor3f(1, 0, 1);
	glutWireSphere(1, 5, 5);
	glPopMatrix();

	//第十四个星星
	glPushMatrix();
	glTranslatef(10, 130, -30);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glColor3f(1, 0, 1);
	glutWireSphere(1, 5, 5);
	glPopMatrix();

	//第十五个星星
	glPushMatrix();
	glTranslatef(0, 150, -10);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glColor3f(0, 0, 0.545);
	glutWireSphere(1, 5, 5);
	glPopMatrix();

	//第十七个星星
	glPushMatrix();
	glTranslatef(-50, 130, 30);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glColor3f(0, 0, 0.545);
	glutWireSphere(1, 5, 5);
	glPopMatrix();

	//第十八个星星
	glPushMatrix();
	glTranslatef(-60, 130, 80);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第十九个星星
	glPushMatrix();
	glTranslatef(0, 135, 5);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第二十个星星
	glPushMatrix();
	glTranslatef(-35, 120, -40);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第二十一个星星
	glPushMatrix();
	glTranslatef(28, 130, 66);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第二十二个星星
	glPushMatrix();
	glTranslatef(80, 135, -33);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第二十三个星星
	glPushMatrix();
	glTranslatef(-44, 150, 70);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//第二十四个星星
	glPushMatrix();
	glTranslatef(-75, 110, -20);
	glColor3f(1, 1, 1);
	glutWireSphere(0.5, 10, 10);
	glPopMatrix();

	//上面是天气选择

	//画出被推的箱子

	//将箱子推进下面的圈内


	//下面是外圈
	glVertex3f(40, 1, -40);
	glVertex3f(40, 1, -80);

	glVertex3f(40, 1, -80);
	glVertex3f(80, 1, -80);

	glVertex3f(80, 1, -80);
	glVertex3f(80, 1, -40);

	glVertex3f(80, 1, -40);
	glVertex3f(40, 1, -40);
	glEnd();
	glLineWidth(1.0);


	//画出被顶的箱子


	//小红旗

	//主席台，在主席台内才能升旗

	//旗杆


	//下面盖几栋楼
	buildingBuild(building1X, building1Z, building1Floor);
	buildingBuild(building2X, building2Z, building2Floor);
	buildingBuild(building3X, building3Z, building3Floor);
	buildingBuild(building4X, building4Z, building4Floor);
	buildingBuild(building5X, building5Z, building5Floor);
	buildingBuild(building6X, building6Z, building6Floor);
	buildingBuild(building7X, building7Z, building7Floor);
	buildingBuild(building8X, building8Z, building8Floor);
	buildingBuild(building9X, building9Z, building9Floor);
	buildingBuild(building10X, building10Z, building10Floor);
	//----------------------------------------------------上面是背景

	Done_Robot(robotX, robotY, robotZ, robotIdentity, landed);//机器人本人

	glutSwapBuffers();
}

void spinCube()
{
	Sleep(10);

	//这是游戏历史上的最简单的死亡判定
	if (robotY <= -20 && robotIdentity == 1)
	{
		printf("哎呀！这一摔恐怕不行了！\n");
	}

	//----------------------------------------------------下面是粉红球重力
	TimerLove++;

	if (TimerLove >= 0 && TimerLove < 200)
	{
		cameraY = 45 - TimerLove / 8;
		cameraZ = 16 - TimerLove / 8;
	}
	else if (TimerLove >= 200 && TimerLove <= 400)
	{
		cameraY = 20 + (TimerLove - 200) / 8;
		cameraZ = -9 + (TimerLove - 200) / 4;
	}
	else if (TimerLove > 400 && TimerLove < 570)
	{
		if (cameraZ >= 7)
			cameraZ -= 0.2;
	}
	else if (TimerLove >= 570 && TimerLove < 770)
	{
		if (cameraX >= 0)
			cameraX -= 0.5;
	}
	else if (TimerLove >= 770 && TimerLove <1270)
	{
		if (cameraX <= 100)
			cameraX += 0.2;
		printf("%lf\n", cameraY);
	}
	else if (TimerLove > 1270 && TimerLove<1500)
	{
		if (cameraY >= 30)
			cameraY -= 0.2;
		printf("%lf\n", cameraY);
	}

	if (TimerLove <= 3000) {
		building1Floor = TimerLove / 70;//strandard
		building2Floor = TimerLove / 20;
		building3Floor = 5 + TimerLove / 300;
		building4Floor = TimerLove / 50;
		building5Floor = TimerLove / 50;
		building6Floor = 2 + TimerLove / 55;
		building7Floor = TimerLove / 60;
		building8Floor = TimerLove / 40;
		building9Floor = 3 + TimerLove / 70;
		building10Floor = TimerLove / 65;
	}

	if (TimerLove > 6000000)
		TimerLove = 0;
	else if (TimerLove <= 200) {

		N1y = TimerLove / 2;
		NW4y = TimerLove / 2;
		NW3y = TimerLove / 2;
		NW2y = TimerLove / 2;
		NW1y = TimerLove / 2;

		S1y = TimerLove / 2;
		SW3y = TimerLove / 2;
		SW2y = TimerLove / 2;
		SW1y = TimerLove / 2;
	}
	else
	{
		if (TimerLove >= 200)
		{
			v_N1y += -gravity / 100;
			N1y += v_N1y;
			if (N1y <= 0)
			{
				v_N1y = -v_N1y;
			}
		}
		if (TimerLove >= 210)
		{
			v_NW4y += -gravity / 100;
			NW4y += v_NW4y;
			if (NW4y <= 0)
			{
				v_NW4y = -v_NW4y;
			}
		}
		if (TimerLove >= 220)
		{
			v_NW3y += -gravity / 100;
			NW3y += v_NW3y;
			if (NW3y <= 0)
			{
				v_NW3y = -v_NW3y;
			}
		}
		if (TimerLove >= 230)
		{
			v_NW2y += -gravity / 100;
			NW2y += v_NW2y;
			if (NW2y <= 0)
			{
				v_NW2y = -v_NW2y;
			}
		}
		if (TimerLove >= 240)
		{
			v_NW1y += -gravity / 100;
			NW1y += v_NW1y;
			if (NW1y <= 0)
			{
				v_NW1y = -v_NW1y;
			}
		}

		//----------------------
		if (TimerLove >= 250)
		{
			v_SW3y += -gravity / 100;
			SW3y += v_SW3y;
			if (SW3y <= 0)
			{
				v_SW3y = -v_SW3y;
			}
		}
		if (TimerLove >= 260)
		{
			v_SW2y += -gravity / 100;
			SW2y += v_SW2y;
			if (SW2y <= 0)
			{
				v_SW2y = -v_SW2y;
			}
		}
		if (TimerLove >= 270)
		{
			v_SW1y += -gravity / 100;
			SW1y += v_SW1y;
			if (SW1y <= 0)
			{
				v_SW1y = -v_SW1y;
			}
		}
		if (TimerLove >= 280)
		{
			v_S1y += -gravity / 100;
			S1y += v_S1y;
			if (S1y <= 0)
			{
				v_S1y = -v_S1y;
			}
		}
		if (TimerLove >= 2300)
		{
			N1y = 0;
			v_N1y = 0;
		}
		if (TimerLove >= 2310)
		{
			NW4y = 0;
			v_NW4y = 0;
		}
		if (TimerLove >= 2320)
		{
			NW3y = 0;
			v_NW3y = 0;
		}
		if (TimerLove >= 2330)
		{
			NW2y = 0;
			v_NW2y = 0;
		}
		if (TimerLove >= 2340)
		{
			NW1y = 0;
			v_NW1y = 0;
		}
		if (TimerLove >= 2350)
		{
			SW3y = 0;
			v_SW3y = 0;
		}
		if (TimerLove >= 2360)
		{
			SW2y = 0;
			v_SW2y = 0;
		}
		if (TimerLove >= 2370)
		{
			SW1y = 0;
			v_SW1y = 0;
		}
		if (TimerLove >= 2380)
		{
			S1y = 0;
			v_S1y = 0;
		}
	}


	//----------------------------------------------------上面是粉红球重力



	//下面是小红旗的重力系统
	//以上是小红旗的重力系统

	//被推的箱子会掉进场地外的地方

	//下面是机器人的水平方向运动效果，有摩擦力模拟
	robotX += v_robotX;
	robotZ += v_robotZ;
	if (v_robotX > 0)
		v_robotX -= 0.015;
	else if (v_robotX < 0)
		v_robotX += 0.015;
	if (v_robotZ > 0)
		v_robotZ -= 0.015;
	else if (v_robotZ)
		v_robotZ += 0.015;


	//用来冲刺镜头缩放的，机器人总速度
	v_robot = abs(v_robotX) + abs(v_robotY) + abs(v_robotZ);


	if (robotIdentity == 1) //人类模式下的重力系统
	{
		if (landed == false)//机器人没有着地，才会受重力下降
		{
			robotY += v_robotY;
			v_robotY += -gravity / 100;
		}

		if (robotY <= 0)
		{
			if (robotX > 105 || robotX < -105 || robotZ>110 || robotZ < -110)
			{
				landed = false;
			}
			else
			{
				landed = true;
				v_robotY = 0;
				robotY = 0;
			}
		}
	}
	else if (robotIdentity == 2)//超人模式下的重力系统，无重力
	{
		robotY += v_robotY;
		if (v_robotY > 0)
			v_robotY -= 0.01;
		else if (v_robotY < 0)
			v_robotY += 0.01;

		if (robotY <= 0)
		{
			landed = true;
			if (robotX > 105 || robotX < -105 || robotZ>110 || robotZ < -110)
			{
				landed = false;
				robotY += v_robotY;
			}
			else
			{
				landed = true;
				v_robotY = 0;
				robotY = 0;
			}
		}
	}





	//------------------------------------------????


	//上面是悬浮块的内容

	//-----------------------------------------------以下为特效用
	theta += 0.1;
	if (theta >= 2 * PI) theta -= 2 * PI;

	if (thunderJump>0)//雷霆跳，每0.01秒减少一点能量，每100持续1秒
		thunderJump--;


	if (thunderColor == 1) //雷霆跳的特效实现，变色
	{
		glColor3f(0.294, 0, 0.51);
		thunderColor++;
	}
	else if (thunderColor == 2)
	{
		glColor3f(0.278, 0.235, 0.545);
		thunderColor++;
	}
	else if (thunderColor == 3)
	{
		glColor3f(0.153, 0.251, 0.545);
		thunderColor++;
	}
	else if (thunderColor == 4)
	{
		glColor3f(0.098, 0.098, 0.439);
		thunderColor++;
	}
	else if (thunderColor == 5)
	{
		glColor3f(0, 0, 0.804);
		thunderColor++;
	}
	else if (thunderColor == 6)
	{
		glColor3f(0, 0, 0.502);
		thunderColor++;
	}
	else if (thunderColor == 7)
	{
		glColor3f(1, 0, 0);
		thunderColor++;
	}
	else if (thunderColor == 8)
	{
		glColor3f(1, 1, 0);
		thunderColor++;
	}
	else if (thunderColor == 9)
	{
		glColor3f(0, 1, 1);
		thunderColor = 1;
	}


	//---------------------------------以上为特效用
	glutPostRedisplay();
}

void mouse(int btn, int state, int x, int y)
{

	if (btn == GLUT_LEFT_BUTTON &&state == GLUT_DOWN) weatherChoose = 1;
	if (btn == GLUT_MIDDLE_BUTTON&&state == GLUT_DOWN) weatherChoose = 3;
	if (btn == GLUT_RIGHT_BUTTON&&state == GLUT_DOWN) weatherChoose = 2;
}
void mykeyboard(unsigned char key, int x, int y)
{
	switch (key)
	{
		//以下的 qwe asd及其大写字母用来，确定观察者的位置
	case 'W':
	case 'w':
	{
		cameraY += 0.5;
		printf("cameraXYZ (%f, %f, %f) \n", cameraX, cameraY, cameraZ);
		break;
	}
	case 'S':
	case 's':
	{
		cameraY -= 0.5;
		printf("cameraXYZ (%f, %f, %f) \n", cameraX, cameraY, cameraZ);
		break;
	}
	case 'A':
	case 'a':
	{
		cameraZ += 0.5;
		printf("cameraXYZ (%f, %f, %f) \n", cameraX, cameraY, cameraZ);
		break;
	}
	case 'D':
	case 'd':
	{
		cameraZ -= 0.5;
		printf("cameraXYZ (%f, %f, %f) \n", cameraX, cameraY, cameraZ);
		break;
	}
	case 'Q':
	case 'q':
	{
		cameraX += 1;
		printf("cameraXYZ (%f, %f, %f) \n", cameraX, cameraY, cameraZ);
		break;
	}
	case 'E':
	case 'e':
	{
		cameraX -= 1;
		printf("cameraXYZ (%f, %f, %f) \n", cameraX, cameraY, cameraZ);
		break;
	}
	//以下的rty fgh及其大写字母用来，确定被观察的中心位置
	case 'T':
	case 't':
	{
		lookAimX -= 1;
		printf("center(x, y, z) (%f, %f, %f) \n", lookAimX, lookAimY, lookAimZ);
		break;
	}
	case 'G':
	case 'g':
	{
		lookAimX += 1;
		printf("center(x, y, z) (%f, %f, %f) \n", lookAimX, lookAimY, lookAimZ);
		break;
	}
	case 'F':
	case 'f':
	{
		lookAimZ += 1;
		printf("center(x, y, z) (%f, %f, %f) \n", lookAimX, lookAimY, lookAimZ);
		break;
	}
	case 'H':
	case 'h':
	{
		lookAimZ -= 1;
		printf("center(x, y, z) (%f, %f, %f) \n", lookAimX, lookAimY, lookAimZ);
		break;
	}
	case 'Y':
	case 'y':
	{
		lookAimY += 1;
		printf("center(x, y, z) (%f, %f, %f) \n", lookAimX, lookAimY, lookAimZ);
		break;
	}
	case 'R':
	case 'r':
	{
		lookAimY -= 1;
		printf("center(x, y, z) (%f, %f, %f) \n", lookAimX, lookAimY, lookAimZ);
		break;
	}
	//以下的ijkl 及其大写字母，控制机器人的上下左右
	case 'I':
	case 'i':
	{

		v_robotX -= 0.1;
		printf("robotX = %f, robotY = %f, robotZ = %f \n", robotX, robotY, robotZ);
		break;
	}
	case 'K':
	case 'k':
	{

		v_robotX += 0.1;
		printf("robotX = %f, robotY = %f, robotZ = %f \n", robotX, robotY, robotZ);
		break;
	}
	case 'J':
	case 'j':
	{
		v_robotZ += 0.1;
		printf("robotX = %f, robotY = %f, robotZ = %f \n", robotX, robotY, robotZ);
		break;
	}
	case 'L':
	case 'l':
	{
		v_robotZ -= 0.1;
		printf("robotX = %f, robotY = %f, robotZ = %f \n", robotX, robotY, robotZ);
		break;
	}
	// U u 都是机器人的跳跃键，是超人的向上飞行键
	case 'U':
	case 'u':
	{
		landed = false;
		if (robotIdentity == 1)//人类模式才是跳跃
		{
			if (thunderJump > 0)
			{
				v_robotY = 6;
			}
			else
			{
				v_robotY = 3;
			}
		}
		else if (robotIdentity == 2)//超人模式直接飞
		{
			if (thunderJump > 0)
			{
				v_robotY += 0.2;
			}
			else
			{
				v_robotY += 0.1;
			}

		}
		break;
	}
	//雷霆跳技能的开始键
	case 'O':
	case 'o':
	{
		thunderJump = 300;
		break;
	}

	//超人模式的向下飞行键
	case 'N':
	case 'n':
	{
		if (robotIdentity == 2)
			v_robotY -= 0.1;
		break;
	}

	//超人模式的透视眼
	case 'B':
	case 'b':
	{
		if (robotIdentity == 2)
		{
			if (superEye == false)
				superEye = true;
			else
				superEye = false;
		}

		break;
	}


	case 'Z':
	case 'z':
	{


		robotX = 5;
		robotY = 0;
		robotZ = 90;
		break;
	}

	}
}
int main(int argc, char** argv)
{
	int yesget = 0;
	printf("\n\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n");
	printf("开始前请阅读操作说明：\n\n");
	printf("下面介绍几个（共29个）简单的操作键：\n\n");
	printf("qwe  QWE\n");
	printf("asd  ASD  这几个键用来控制观察者的位置。\n\n");
	printf("rty  RTY\n");
	printf("fgh  FGH  这几个键用来控制被观察的位置。\n\n");
	printf(" z 和 Z 是重置人物的位置。\n\n");
	printf(" i    I\n");
	printf("jkl  JKL  这几个键用来控制人物的水平移动。\n\n");
	printf(" u 和 U 是跳跃键，在超人模式下是上升键，因为超人是不受重力影响的。\n\n");
	printf(" o 和 O 是技能雷霆跳，开启此功能，可使人物的跳跃力大幅增强。\n\n");
	printf(" n 和 N 是下降键，在超人模式下，可降低人物高度。\n\n");
	printf(" b 和 B 是透视眼，在超人模式下，可开启。\n\n");
	printf("input 1 to start:");
	scanf("%d", &yesget);
	if (yesget == 1)
	{
		glutInit(&argc, argv);
		glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
		glutInitWindowSize(800, 800);
		glutInitWindowPosition(100, 20);
		glutCreateWindow("To GIRL");

		init();
		glutReshapeFunc(reshape);

		glutDisplayFunc(display);
		glutIdleFunc(spinCube);

		glutMouseFunc(mouse);
		glutKeyboardFunc(mykeyboard);
		glutMainLoop();
	}
	return 0;
}